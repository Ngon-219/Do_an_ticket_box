// <auto-generated />
using System;
using Do_an_ticket_box.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Do_an_ticket_box.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241021032556_AvartarColUser")]
    partial class AvartarColUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Do_an_ticket_box.Models.Booking", b =>
                {
                    b.Property<int>("Booking_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Booking_ID"), 1L, 1);

                    b.Property<int>("Event_ID")
                        .HasColumnType("int");

                    b.Property<int>("Ticket_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<byte[]>("booking_time")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("Booking_time");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status");

                    b.Property<decimal>("total_amout")
                        .HasColumnType("decimal")
                        .HasColumnName("Total_amout");

                    b.HasKey("Booking_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Event", b =>
                {
                    b.Property<int>("Event_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Event_ID"), 1L, 1);

                    b.Property<string>("Event_Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Event_name");

                    b.Property<DateTime>("Event_date")
                        .HasColumnType("Date")
                        .HasColumnName("Event_date");

                    b.Property<TimeSpan>("Event_time")
                        .HasColumnType("time")
                        .HasColumnName("Event_time");

                    b.Property<int>("avaiable_ticket")
                        .HasColumnType("int")
                        .HasColumnName("Avaiable_tickets");

                    b.Property<byte[]>("created_at")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_at");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Location");

                    b.Property<int>("total_tickets")
                        .HasColumnType("int")
                        .HasColumnName("Total_tickets");

                    b.HasKey("Event_ID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Payment", b =>
                {
                    b.Property<int>("Payment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_ID"), 1L, 1);

                    b.Property<int>("Booking_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("amount_paid")
                        .HasColumnType("decimal")
                        .HasColumnName("Amount_paid");

                    b.Property<byte[]>("payment_time")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("Payment_time");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status");

                    b.HasKey("Payment_ID");

                    b.HasIndex("Booking_ID")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Report", b =>
                {
                    b.Property<int>("Report_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Report_ID"), 1L, 1);

                    b.Property<byte[]>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created");

                    b.Property<int>("Event_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Comment");

                    b.Property<int>("rate")
                        .HasColumnType("int")
                        .HasColumnName("Report");

                    b.HasKey("Report_ID");

                    b.HasIndex("Event_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Ticket", b =>
                {
                    b.Property<int>("Ticket_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ticket_ID"), 1L, 1);

                    b.Property<int>("Event_ID")
                        .HasColumnType("int");

                    b.Property<string>("Ticket_type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Ticket_type");

                    b.Property<decimal>("price")
                        .HasColumnType("Decimal(10,2)")
                        .HasColumnName("Price");

                    b.Property<int>("seat_number")
                        .HasColumnType("int")
                        .HasColumnName("Seat_number");

                    b.Property<int>("seat_remain")
                        .HasColumnType("int")
                        .HasColumnName("Seat_remain");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("Ticket_ID");

                    b.HasIndex("Event_ID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address");

                    b.Property<byte[]>("Created_at")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("Created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Surname");

                    b.Property<string>("avatarImg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AvatarImgUrl");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Role");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Booking", b =>
                {
                    b.HasOne("Do_an_ticket_box.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Payment", b =>
                {
                    b.HasOne("Do_an_ticket_box.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Do_an_ticket_box.Models.Payment", "Booking_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Report", b =>
                {
                    b.HasOne("Do_an_ticket_box.Models.Event", "Event")
                        .WithMany("Report")
                        .HasForeignKey("Event_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Do_an_ticket_box.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Ticket", b =>
                {
                    b.HasOne("Do_an_ticket_box.Models.Event", "Event")
                        .WithMany("Ticket")
                        .HasForeignKey("Event_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Booking", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.Event", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Do_an_ticket_box.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
