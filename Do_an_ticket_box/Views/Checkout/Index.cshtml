@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model List<Do_an_ticket_box.DTOs.BookingDtos>

<script src="https://www.paypal.com/sdk/js?client-id=AWxeKIb-HnG9OejbSGepK_oRSnWUP_lXO7XQA3VlMelObVlPucrACq88qkSU4thIS5J5sCW9eN_j4TvN&currency=USD"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="mx-auto p-4 rounded text-white border shadow m-3" style="width: 420px;">
    <h2 class="text-center mb-5">Complete your order</h2>
    <div class="form-group mb-3 text-center align-items-center align-content-center d-flex" style="flex-direction: column;">
        <p>Hoàn thành thanh toán cho hoá đơn của sự kiện <strong>@ViewData["eventName"]</strong></p>
        <p>Thông tin đơn hàng </p>
        @foreach (var bookings in Model)
        {
            <div class="card text-center bg-success text-white border-primary" style="width: 20rem; margin-bottom: 2vh;">
                <div class="card-body">
                    <h5 class="card-title">@bookings.TicketName x @bookings.Quanlity</h5>
                    <h5 class="card-title">
                        @bookings.eventTime - @String.Format("{0:dd/MM/yyyy}", @bookings.eventDate)
                    </h5>
                    <h5 class="card-title">@bookings.location</h5>

                </div>
            </div>
        }
        <p>
            Tổng giá trị cần thanh toán là: @String.Format("{0:N0} VND", @ViewData["amount"])
        </p>
    </div>
    <br />
    <div id="notification-container"></div>
    <div id="paypal-button-container"></div>
    <input type="hidden" value="0" id="ticketId" />
    <input type="hidden" value="0" id="eventId"/>
</div>

<script>
    paypal.Buttons({
        async createOrder() {
            const response = await fetch("@Url.ActionLink("CreateOrder", "Checkout")", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    amount: @ViewData["amount"] / 25000 .toFixed(2)
                })
            });

            const order = await response.json();

            return order.id;
        },

        async onApprove(data) {
            const amount = (@ViewData["amount"] / 25000).toFixed(2)
            const response = await fetch("@Url.ActionLink("CompleteOrder", "Checkout")", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    orderID: data.orderID,
                    amount: amount
                })
            })
            const details = await response.json();

            if (details == "success") {
                Swal.fire({
                    title: "Bạn đã thanh toán thành công",
                    confirmButtonText: "Trở về trang chủ",
                    icon: "success",
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = "/";
                    }
                });
            }
            else {
                if (details == "soldOut") {
                    Swal.fire({
                        title: "Thanh toán thất bại, vé đã sold out",
                        confirmButtonText: "Trở về trang chủ",
                        icon: "warning",
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = "/";
                        }
                    });
                }
                if (details == "error") {
                    Swal.fire({
                        title: "Thanh toán thất bại,vui lòng kiểm tra số dư paypal hoặc kết nối mạng",
                        confirmButtonText: "Trở về trang chủ",
                        icon: "warning",
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = "/";
                        }
                    });
                }
            }

        },

        onCancel(data) {
            document.getElementById("notification-container").innerHTML = `
                    <div class='alert alert-danger alert-dismissible fade show' role='alert'>
                        <strong>Payment Canceled!</strong>
                        <button type='button' class='btn-close' data-bs-dismiss='alert' aria-label='Close'></button>
                    </div>
                `;
        },

        onError(err) {
            document.getElementById("notification-container").innerHTML = `
                    <div class='alert alert-danger alert-dismissible fade show' role='alert'>
                        <strong>An error occurred! Please retry later.</strong>
                        <button type='button' class='btn-close' data-bs-dismiss='alert' aria-label='Close'></button>
                    </div>
                `;
        }

    }).render('#paypal-button-container');


</script>